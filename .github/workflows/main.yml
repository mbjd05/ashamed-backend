name: Build, Test, Dockerize! 🚀

on:
  push:
    branches:
      - main
    paths-ignore:
      - .github/workflows/*
      - README.md
      - .gitignore
      - .devcontainer/*
  workflow_dispatch:

permissions:
  contents: write
  actions: write
  security-events: write

env:
  IMAGE_NAME: ${{ github.repository }}
  DOTNET_VERSION: '8.0.x'
  SOLUTION_NAME: 'AshamedApp'

jobs:
  build-test-and-coverage:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup .NET 📦
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore Dependencies 🔄
        run: dotnet restore ${{ env.SOLUTION_NAME }}.sln

      - name: Build Solution 🔨
        run: dotnet build ${{ env.SOLUTION_NAME }}.sln -c Release --no-restore

      - name: Run Tests with Coverage 🧪
        run: dotnet test ${{ env.SOLUTION_NAME }}.Tests/${{ env.SOLUTION_NAME }}.Tests.csproj -c Release --no-build --verbosity normal /p:CollectCoverage=true /p:CoverletOutputFormat=lcov /p:CoverletOutput=./lcov.info

      - name: Coveralls GitHub Action
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.SOLUTION_NAME }}.Tests/lcov.info
          format: lcov

      - name: Run Codacy Analysis CLI 🔍
        uses: codacy/codacy-analysis-cli-action@master
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          verbose: true
          output: results.sarif
          format: sarif
          gh-code-scanning-compat: true
          max-allowed-issues: 2147483647
  
      - name: Upload SARIF results file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif

  publish:
    needs: build-test-and-coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Publish Application 🔨
        run: dotnet publish "AshamedApp.API/AshamedApp.API.csproj" -c Release -o ./publish /p:UseAppHost=false

      - name: Build Docker Image 🐳
        run: docker build -t ${{ env.IMAGE_NAME }} .

      - name: Log in to GitHub Container Registry 🔑
        run: echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push Docker Image 🚢
        run: |
          docker tag ${{ env.IMAGE_NAME }}:latest ghcr.io/${{ github.repository }}:latest
          docker push ghcr.io/${{ github.repository }}:latest
